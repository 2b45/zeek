TEST SUITE
	broker.remote_id
		failing due to lack of Modified() calls?

	language/delete-field-set.zeek
		what does it mean to delete a field with a &default ?

	language.index-assignment-invalid
		error message has temp variable in it rather than original (ETV)

	language.subnet-errors
		ETV

	language.type-coerce-numerics
		### coercion warning/error

	language.uninitialized-local
	language.uninitialized-local2
		static analysis correctly finds issues prevously missed

	language.vector
		need to support "v1 && v2" etc.

	plugins.hooks
		messy - prints lots of embedded function bodies

	scripts.base.frameworks.config.container-options
		fails due to polymorphic any -> set[T] in Config::format_value

	scripts.base.frameworks.control.configuration_update
		failing due to lack of Modified() calls?

	scripts.base.frameworks.file-analysis.bifs.file_exists_lookup_file
		-warning: non-void function returning without a value: Files::lookup_file
		+expression error in <no location>: value used but not set (#0)

	scripts.base.frameworks.input.config.enum-set
		same issue as scripts.base.frameworks.config.container-options

	scripts.base.frameworks.config.read_config_cluster
		failing due to lack of Modified() calls?

	scripts.policy.frameworks.netcontrol.catch-and-release
	scripts.policy.frameworks.netcontrol.catch-and-release-forgotten
		need help understanding these

	scripts.base.frameworks.input.raw.basic
	scripts.base.frameworks.input.raw.execute
	scripts.base.frameworks.input.raw.rereadraw
		fails with inlining since prints function body

	scripts.base.frameworks.intel.remove-non-existing
		error formatting

Test suite should split into error tests vs. functionality tests

Recursive invocation of loops will fail because iter_info is per-loop
	and not per-loop-instantiation.  Making it dynamic for
	potentially recursive functions is thorny because we want to
	recover memory even if the loop doesn't undergo a normal
	termination but instead executes a "return", say.  Need to
	use an intrusive pointer or a managed_slot temporary (probably
	best).  The code actually already requests slots for iter_info,
	so I think these just need to be changed to be managed, and
	a copy made, *if* the function is recursive.

the original problem is actually problematic in practice to solve
	due to occurring in benign locations

missing vector elements due to assign-past-end

do we still care about MemoryAllocation()?

vectors don't support ++/--, nor mixed operations w/ scalars

vector of mixed-any
	e.g. language.index-assignment-invalid (expects it to fail)
		vs. language.type-check-vector

assigning vector-of-any (that's actually vector-of-string) to
	local explicitly typed as vector-of-count works in the interpreter
	and *changes the local's type* to vector-of-string

same_object() on atomic types

need to track NewSlot() denizens in case they require memory management

error messages tied back to non-reduced original

really don't want to generate "isn't used" if doing reduction since
	it induces some constant propagation of globals (could turn that
	off though)

recursion, tail-recursion
